// Generated by CoffeeScript 1.10.0
var Fuck, Game, Panel, Spit, TH1Main, TimerButton, a, button, div, el, fullRow, h1, h2, h3, input, label, p, ref, row;

ref = React.DOM, a = ref.a, button = ref.button, div = ref.div, h1 = ref.h1, h2 = ref.h2, h3 = ref.h3, input = ref.input, label = ref.label, p = ref.p;

el = React.createElement;

row = function(optsOrContent, maybeContent) {
  var content, opts;
  if (maybeContent) {
    content = maybeContent;
    opts = optsOrContent;
  } else {
    content = optsOrContent;
    opts = {};
  }
  return div({
    key: opts.key,
    className: 'row',
    style: {
      marginTop: 20,
      marginBottom: opts.marginBottom
    }
  }, content);
};

fullRow = function(optsOrContent, maybeContent) {
  var content, opts;
  if (maybeContent) {
    content = maybeContent;
    opts = optsOrContent;
  } else {
    content = optsOrContent;
    opts = {};
  }
  return row(opts, div({
    className: "col-xs-12 " + opts.additionalClass
  }, content));
};

Panel = React.createClass({displayName: "Panel",
  getDefaultProps: function() {
    return {
      panelClass: 'panel-default'
    };
  },
  render: function() {
    var panelClass;
    panelClass = 'panel ' + (_.isUndefined(this.props.primaryPanel) ? this.props.panelClass : this.props.primaryPanel ? 'panel-primary' : 'panel-default');
    return div({
      className: panelClass
    }, this.props.heading ? div({
      className: 'panel-heading'
    }, h3({
      className: 'panel-title'
    }, this.props.heading)) : void 0, div({
      className: 'panel-body'
    }, this.props.body));
  }
});

TimerButton = React.createClass({displayName: "TimerButton",
  getInitialState: function() {
    return {
      countdown: void 0,
      timer: void 0,
      done: false
    };
  },
  startTimer: function() {
    this.setState({
      countdown: 3
    });
    return this.interval = setInterval(this.timerCallback, 1000);
  },
  timerCallback: function() {
    if (this.state.countdown > 0) {
      this.props.speak(3 === this.state.countdown ? "Ready in " + this.state.countdown : "" + this.state.countdown);
      return this.setState({
        countdown: this.state.countdown - 1,
        timer: this.props.seconds
      });
    } else if (this.state.timer > 0) {
      if (this.state.timer === this.props.seconds) {
        this.props.speak('Hold it!');
      }
      return this.setState({
        timer: this.state.timer - 1,
        done: 1 === this.state.timer
      });
    } else if (this.state.timer === 0) {
      this.props.speak('Done.');
      clearInterval(this.interval);
      return this.interval = 0;
    }
  },
  componentWillUnmount: function() {
    if (this.interval) {
      return clearInterval(this.interval);
    }
  },
  render: function() {
    if (this.state.countdown) {
      return p({
        className: 'lead'
      }, "Ready in " + this.state.countdown + "...");
    } else if (this.state.timer) {
      return p({
        className: 'lead'
      }, "Hold it! " + this.state.timer + "...");
    } else if (this.state.done) {
      return p({
        className: 'lead'
      }, "Done. If you couldn't make it, try again and hold it as long as you can this time.");
    } else {
      return button({
        className: "btn btn-warning btn-lg",
        onClick: this.startTimer,
        style: {
          marginRight: 20
        }
      }, 'Start timer');
    }
  }
});

Spit = ['Take all that spit and grease it on your dick and balls', 'Sit down, drool the spit and try to take it back to your mouth without using your hands. A little tip: Image you are drinking with your straw', 'Get on your back with your neck on the border of your bed, drool the spit and try to take it back to your mouth without using your hands. A little tip: Image you are drinking with your straw', 'Get on your back with your neck on the border of your bed and spit it all over your face', 'Get on your back with your neck on the border of your bed and spit it all over your face, make sure you get some spit into your eyes', 'Take some spit and drool it on your open eyes with your hand'];

Fuck = ['Fuck your mouth with your dildo, let it touch the back of your throat 10 times, fast, after that swallow your dildo and hold it for 3 seconds. Do this 3 times in a row without a break', 'Fuck your mouth with your dildo, let it touch the back of your throat 10 times, fast, after that swallow your dildo and hold it for 5 seconds. Do this 3 times in a row without a break', 'Fuck your mouth with your dildo, let it touch the back of your throat 15 times, fast, after that swallow your dildo and hold it for 8 seconds. Do this 5 times in a row without a break', 'Fuck your mouth with your dildo, let it touch the back of your throat 15 times, fast, after that swallow your dildo and hold it for 10 seconds. Do this 7 times in a row without a break', 'Fuck your mouth with your dildo, let it touch the back of your throat 20 times, fast, after that swallow your dildo and hold it for 10 seconds. Do this 10 times in a row without a break', 'Ouch, get ready to get throated like a bitch. Fuck your mouth with your dildo, let it touch the back of your throat 5 times, fast, after that swallow your dildo and hold it for 15 seconds. Do this 20 times in a row without a break'];

Game = React.createClass({displayName: "Game",
  getInitialState: function() {
    return {
      position: this.randomPosition(),
      nextTask: 0,
      tasks: []
    };
  },
  randomPosition: function() {
    return _.sample(['On the floor, kneeling', 'On the floor, ass on the ground between your legs', 'Neck on border of your bed', 'Sitting in the bathtub', 'Standing']);
  },
  Tasks: [[['Lick on it', 'Gag on it 5 times', 'Gag on it 10 times', 'Swallow it down your throat 5 times', 'Swallow it down your throat 10 times', 'Gag on it 15 times, then swallow it down your throat 15 times'], ['Very slowly, go deeper and deeper', 'Push it down your throat and leave it there for 3 seconds.', 'Push it down your throat and leave it there for 6 seconds.', 'Push it in as fast as you can and leave it there for 10 seconds', 'Push it in as fast as you can and leave it there for 15 seconds', 'Push it into your throat and out as fast you can 3 times, repeat it 5 times'], [], ['Play with your spit with both hands', 'I want to see your face full of spit', 'Take all that spit and grease it on your belly, tits and face', 'Get all that spit back into your dirty mouth, after that back into the bowl, slowly', 'Gather all the spit in your hands, then suck it back into your mouth', 'Get all that spit back into your dirty mouth and swallow it']], [['Lick on it', 'Gag on it 5 times', 'Gag on it 10 times', 'Swallow it down your throat 5 times', 'Swallow it down your throat 10 times', 'Gag on it 15 times, then swallow it down your throat 15 times'], ['Very slowly, go deeper and deeper', 'Push it down your throat and leave it there for 3 seconds.', 'Push it down your throat and leave it there for 6 seconds.', 'Push it in as fast as you can and leave it there for 10 seconds', 'Push it in as fast as you can and leave it there for 15 seconds', 'Push it into your throat and out as fast you can 3 times, repeat it 5 times'], Spit, [], Fuck, Spit, Fuck, Spit]],
  tasks: function() {
    return this.Tasks[this.props.mode - 1];
  },
  randomTask: function(num) {
    var l, tasks;
    tasks = this.tasks()[num];
    l = tasks.length - 1;
    return tasks[this.withDifficulty(function() {
      return _.random(l);
    })];
  },
  withDifficulty: function(fun) {
    switch (this.props.difficulty) {
      case 'light':
        return _.min([fun(), fun()]);
      case 'hardcore':
        return _.max([fun(), fun()]);
      default:
        return fun();
    }
  },
  d16: function() {
    return this.withDifficulty(function() {
      return _.random(1, 6);
    });
  },
  timerTask: function() {
    var d3, secs;
    d3 = this.d16();
    secs = 0;
    while (d3--) {
      secs += this.d16();
    }
    return secs;
  },
  speak: function(task) {
    if (this.props.speechEnabled) {
      return responsiveVoice.speak(task, "UK English Female", {
        rate: 1
      });
    }
  },
  deepthroatingTaskNum: function() {
    if (this.props.mode === 1) {
      return 2;
    } else {
      return 3;
    }
  },
  getNextTask: function() {
    var m, secs, task, timerTask;
    timerTask = this.state.nextTask === this.deepthroatingTaskNum();
    task = timerTask ? "Hold your dildo in your throat for " + (this.timerTask()) + " seconds." : this.randomTask(this.state.nextTask);
    if (this.state.nextTask < 4 && (m = task.match(/(\d+) seconds/))) {
      secs = +m[1];
    }
    this.speak(task);
    return this.setState({
      nextTask: 1 + this.state.nextTask,
      tasks: [task].concat(this.state.tasks),
      timerSecs: secs
    });
  },
  render: function() {
    if (0 === this.state.nextTask) {
      _.defer(function() {
        return $("html, body").animate({
          scrollTop: $(document).height()
        });
      });
    }
    return div({}, this.renderButton(), this.renderTasks(), this.renderPosition());
  },
  renderPosition: function() {
    return el(Panel, {
      primaryPanel: 0 === this.state.nextTask,
      heading: 'Position',
      body: this.state.position
    });
  },
  Headings: [['Just a bit of warm up...', "Horny, aren't you? Now insert the dildo into your throat:", "Deepthroating time!", "Let's play with your spit now..."], ['Just a bit of warm up...', "Horny, aren't you? Now insert the dildo into your throat:", "Let's play with your spit now...", "Deepthroating time!", "Let's fuck that troat now...", "Let's play with your spit again!", "Let's fuck that troat again!", "Let's play with your spit one last time!"]],
  headingFor: function(n) {
    return "Task " + n + " â€” " + this.Headings[this.props.mode - 1][n - 1];
  },
  renderTasks: function() {
    return _.map(this.state.tasks, (function(_this) {
      return function(task, i) {
        var n;
        n = _this.state.nextTask - i;
        return el(Panel, {
          key: "task" + n,
          primaryPanel: 0 === i,
          heading: _this.headingFor(n),
          body: task
        });
      };
    })(this));
  },
  renderButton: function() {
    return fullRow({
      marginBottom: 20
    }, this.state.nextTask < this.tasks().length ? div({
      className: 'text-center center-block'
    }, this.state.timerSecs ? el(TimerButton, {
      key: 'timer' + this.state.nextTask,
      seconds: this.state.timerSecs,
      speak: this.speak
    }) : void 0, button({
      className: "btn btn-primary btn-lg",
      onClick: this.getNextTask
    }, 'Get next task')) : button({
      className: "btn btn-success btn-lg center-block",
      onClick: this.props.startAnother
    }, 'Start another game'));
  }
});

TH1Main = React.createClass({displayName: "TH1Main",
  getInitialState: function() {
    return {
      started: false,
      speechEnabled: this.isSpeechEnabled(),
      difficulty: this.initialDifficulty()
    };
  },
  isSpeechEnabled: function() {
    var ref1;
    return ((ref1 = window.localStorage) != null ? ref1.speechEnabled : void 0) === 'true';
  },
  initialDifficulty: function() {
    var m, ref1;
    if (m = top.location.search.match(/[?&]difficulty=([012])/)) {
      return ['light', 'normal', 'hardcore'][+m[1]];
    } else if (m = top.location.search.match(/[?&]hardcore=1/)) {
      return 'hardcore';
    } else {
      return ((ref1 = window.localStorage) != null ? ref1.difficulty : void 0) || 'normal';
    }
  },
  startAnother: function() {
    return this.setState({
      started: false
    });
  },
  startGame: function(mode) {
    return this.setState({
      started: mode
    });
  },
  toggleSpeech: function() {
    var ref1, speechEnabled;
    speechEnabled = !this.state.speechEnabled;
    if ((ref1 = window.localStorage) != null) {
      ref1.speechEnabled = speechEnabled;
    }
    return this.setState({
      speechEnabled: speechEnabled
    });
  },
  setDifficulty: function(diff) {
    var ref1;
    if ((ref1 = window.localStorage) != null) {
      ref1.difficulty = diff;
    }
    return this.setState({
      difficulty: diff
    });
  },
  render: function() {
    return div({
      className: "container"
    }, this.renderHeadline(), this.renderIntroduction(), this.state.started ? el(Game, {
      startAnother: this.startAnother,
      speechEnabled: this.state.speechEnabled,
      difficulty: this.state.difficulty,
      mode: this.state.started
    }) : this.renderStartGameButton(), this.renderFooter());
  },
  renderHeadline: function() {
    if (this.state.started) {
      return h1({}, 'Throat Heaven ' + this.state.started);
    } else {
      return h2({}, 'Throat Heaven 1 & 2');
    }
  },
  renderFooter: function() {
    return div({
      className: 'row',
      style: {
        marginTop: 20
      }
    }, div({
      className: "col-xs-6"
    }, label({}, input({
      type: 'checkbox',
      checked: this.state.speechEnabled,
      onChange: this.toggleSpeech
    }), ' Enable speech Â '), div({
      style: {
        display: 'inline-block'
      }
    }, ' Mode: ', label({}, input({
      type: 'radio',
      name: 'difficulty',
      checked: this.state.difficulty === 'light',
      onChange: (function(_this) {
        return function() {
          return _this.setDifficulty('light');
        };
      })(this)
    }), ' LightÂ '), label({}, input({
      type: 'radio',
      name: 'difficulty',
      checked: this.state.difficulty === 'normal',
      onChange: (function(_this) {
        return function() {
          return _this.setDifficulty('normal');
        };
      })(this)
    }), ' NormalÂ '), label({}, input({
      type: 'radio',
      name: 'difficulty',
      checked: this.state.difficulty === 'hardcore',
      onChange: (function(_this) {
        return function() {
          return _this.setDifficulty('hardcore');
        };
      })(this)
    }), ' HardcoreÂ '))), div({
      className: "col-xs-6"
    }, p({
      className: 'pull-right text-right lead'
    }, 'Based on ', a({
      href: 'http://www.getdare.com/bbs/showthread.php?t=176573',
      target: '_blank'
    }, 'ThroatÂ HeavenÂ 1Â dare'), ' andÂ ', a({
      href: 'http://www.getdare.com/bbs/showthread.php?t=188674',
      target: '_blank'
    }, 'ThroatÂ HeavenÂ 2Â dare'))));
  },
  renderStartGameButton: function() {
    return fullRow(div({
      className: 'text-center center-block'
    }, button({
      className: "btn btn-primary btn-lg",
      onClick: ((function(_this) {
        return function() {
          return _this.startGame(1);
        };
      })(this)),
      style: {
        margin: '20px'
      }
    }, 'Start Throat Heaven 1'), button({
      className: "btn btn-primary btn-lg",
      onClick: ((function(_this) {
        return function() {
          return _this.startGame(2);
        };
      })(this))
    }, 'Start Throat Heaven 2')));
  },
  renderIntroduction: function() {
    return el(Panel, {
      primaryPanel: !this.state.started,
      heading: 'Introduction',
      body: div({}, p({}, "Get naked. Grab your doubledildo or something that you can swallow."), p({}, "Place a bowl under your face. You will create lots of spit, don't swallow it, the bowl has to be full of your spit."), p({}, "Roll to determine how you must suck the dildo. "))
    });
  }
});

ReactDOM.render(el(TH1Main, null), document.getElementById('content'));
